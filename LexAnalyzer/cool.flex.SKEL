%{
#include </var/tmp/cool/include/PA2/cool-parse.h>
#include </var/tmp/cool/include/PA2/stringtab.h>
#include </var/tmp/cool/include/PA2/utilities.h>

/* The compiler assumes these identifiers. */
#define yylval cool_yylval
#define yylex  cool_yylex

/* Max size of string constants */
#define MAX_STR_CONST 1025
#define YY_NO_UNPUT   /* keep g++ happy */

FILE *fin = stdin; /* we read from this file */

/* define YY_INPUT so we read from the FILE fin:
 * This change makes it possible to use this scanner in
 * the Cool compiler.
 */
#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
    if ( (result = fread( (char*)buf, sizeof(char), max_size, fin)) < 0) \
        YY_FATAL_ERROR( "read() in flex scanner failed");

char string_buf[MAX_STR_CONST]; /* to assemble string constants */
char *string_buf_ptr;

extern int curr_lineno;
extern int verbose_flag;

extern YYSTYPE cool_yylval;

/*
 *  Add Your own definitions here
*/
#define DIGITS [0-9]
#define WHITE_SPACES [ \n\f\r\t\v]
#define KEYWORD (?i:(class|else|if|in|inherits|isvoid|let|loop|pool|then|while|case|esac|new|of|not))|(false|true)
#define CLASSES (class|Class|CLASS)
#define ELSES (else|Else|ELSE)
#define IFS (if|If|IF)
#define INS (in|In|IN)
#define INHERITSS (inherits|Inherits|INHERITS)
#define ISVOIDS (isvoid|Isvoid|ISVOID)
#define LETS (let|Let|LET)
#define LOOPS (loop|Loop|LOOP)
#define POOLS (pool|Pool|POOL)
#define THENS (then|Then|THEN)
#define WHILES (while|While|WHILE)
#define CASES (case|Case|CASE)
#define ESACS (esac|Esac|ESAC)
#define NEWS (new|New|NEW)
#define OFS (of|Of|OF)
#define NOTS (not|Not|NOT)
#define BOOL_CONSTS (true|false)
#define IDENTIFIERS (?!{KEYWORD})[A-Z][A-Za-z0-9_]*
#define TYPE_IDENTIFIERS (?!{KEYWORD})[A-Z][A-Za-z]*
%}


/*
 * Define names for regular expressions here.
 */

DARROW          =>
INT_CONST       -?{DIGITS}+
WHITE_SPACE     {WHITE_SPACES}+
CLASS           {CLASSES}+
ELSE            {ELSES}+
IF              {IFS}+
IN              {INS}+
INHERITS        {INHERITSS}+
ISVOID          {ISVOIDS}+
LET             {LETS}+ 
LOOP            {LOOPS}+
POOL            {POOLS}+
THEN            {THENS}+
WHILE           {WHILES}+
CASE            {CASES}+ 
ESAC            {ESACS}+
NEW             {NEWS}+
OF              {OFS}+
NOT             {NOTS}+
BOOL_CONST      {BOOL_CONSTS}+ 
IDENTIFIER      {IDENTIFIERS}+
TYPE_IDENTIFIER {TYPE_IDENTIFIERS}+

%x COMMENTS_DASH
%x COMMENTS_PAREN

%%
 /*
  *Begin comments
 */
"--" {BEGIN(COMMENTS_DASH);}

 /*
  *Begin comments
 */
"(*" {BEGIN(COMMENTS_PAREN);}

 /*
  * Do nothing. Ignore all input characters
 */
<COMMENTS_DASH>. {}
<COMMENTS_PAREN>. {}

 /*
  *Return to initial state 
 */
<COMMENTS_DASH>\n {BEGIN(INITIAL);}
<COMMENTS_PAREN>"*)" {BEGIN(INITIAL);}

 /*
  *  The multiple-character operators.
  */
DARROW          { printf("Token: %s\n", yytext); return DARROW; }
INT_CONST       { printf("Token: %s\n", yytext); return INT_CONST; }
WHITE_SPACE     ;/* Do nothing for white spaces */
CLASS           { printf("Token: %s\n", yytext); return CLASS; }
ELSE            { printf("Token: %s\n", yytext); return ELSE; }
IF              { printf("Token: %s\n", yytext); return IF; }
IN              { printf("Token: %s\n", yytext); return IN; }
INHERITS        { printf("Token: %s\n", yytext); return INHERITS; }
ISVOID          { printf("Token: %s\n", yytext); return ISVOID; }
LET             { printf("Token: %s\n", yytext); return LET; }
LOOP            { printf("Token: %s\n", yytext); return LOOP; }
POOL            { printf("Token: %s\n", yytext); return POOL; }
THEN            { printf("Token: %s\n", yytext); return THEN; }
WHILE           { printf("Token: %s\n", yytext); return WHILE; }
CASE            { printf("Token: %s\n", yytext); return CASE; }
ESAC            { printf("Token: %s\n", yytext); return ESAC; }
NEW             { printf("Token: %s\n", yytext); return NEW; }
OF              { printf("Token: %s\n", yytext); return OF; }
NOT             { printf("Token: %s\n", yytext); return NOT; }
BOOL_CONST      { printf("Token: %s\n", yytext); return BOOL_CONST; }
IDENTIFIER      { printf("Token: %s\n", yytext); return IDENTIFIER; }
TYPE_IDENTIFIER { printf("Token: %s\n", yytext); return TYPE_IDENTIFIER; }

. ; /* Do nothing */

 /*
  * Keywords are case-insensitive except for the values true and false,
  * which must begin with a lower-case letter.
  */


 /*
  *  String constants (C syntax)
  *  Escape sequence \c is accepted for all characters c. Except for 
  *  \n \t \b \f, the result is c.
  *
  */


%%
int main()
{
  yylex();

  return 0;
}

int yywrap() {
    return 1;
}

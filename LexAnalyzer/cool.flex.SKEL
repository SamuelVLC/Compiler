%{
#include </var/tmp/cool/include/PA2/cool-parse.h>
#include </var/tmp/cool/include/PA2/stringtab.h>
#include </var/tmp/cool/include/PA2/utilities.h>

/* The compiler assumes these identifiers. */
#define yylval cool_yylval
#define yylex  cool_yylex

/* Max size of string constants */
#define MAX_STR_CONST 1025
#define YY_NO_UNPUT   /* keep g++ happy */

FILE *fin = stdin; /* we read from this file */

/* define YY_INPUT so we read from the FILE fin:
 * This change makes it possible to use this scanner in
 * the Cool compiler.
 */
#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
    if ( (result = fread( (char*)buf, sizeof(char), max_size, fin)) < 0) \
        YY_FATAL_ERROR( "read() in flex scanner failed");

char string_buf[MAX_STR_CONST]; /* to assemble string constants */
char *string_buf_ptr;

extern int curr_lineno;
extern int verbose_flag;

extern YYSTYPE cool_yylval;

/*
 *  Add Your own definitions here
*/
#define DIGITS [0-9]
#define WHITE_SPACE [ \n\f\r\t\v]
#define KEYWORD (?i:(class|else|if|in|inherits|isvoid|let|loop|pool|then|while|case|esac|new|of|not))|(false|true)  
#define IDENTIFIER (?!{KEYWORD})[A-Z][A-Za-z0-9_]*
#define TYPE_IDENTIFIER (?!{KEYWORD})[A-Z][A-Za-z]*
%}


/*
 * Define names for regular expressions here.
 */

DARROW  =>
INTEGERS  -?DIGITS+
WHITE_SPACES  WHITE_SPACE+
KEYWORDS  KEYWORD+
IDENTIFIERS   IDENTIFIER+
TYPE_IDENTIFIERS  TYPE_IDENTIFIER+

%x COMMENTS_DASH
%x COMMENTS_PAREN

%%
 /*
  *Begin comments
 */
"--" {BEGIN(COMMENTS_DASH);}

 /*
  *Begin comments
 */
"(*" {BEGIN(COMMENTS_PAREN);}

 /*
  * Do nothing. Ignore all input characters
 */
<COMMENTS_DASH>. {}
<COMMENTS_PAREN>. {}

 /*
  *Return to initial state 
 */
<COMMENTS_DASH>\n {BEGIN(INITIAL);}
<COMMENTS_PAREN>"*)" {BEGIN(INITIAL);}

 /*
  *  The multiple-character operators.
  */
DARROW            { printf("Token: %s\n", yytext); return DARROW; }
{INTEGERS}          { printf("Token: %s\n", yytext); return INTEGERS;}
WHITE_SPACES      ; /* Do nothing for white spaces */
KEYWORDS          {printf("Token: %s\n", yytext); return KEYWORDS;}
IDENTIFIERS       {printf("Token: %s\n", yytext); return IDENTIFIERS;}
TYPE_IDENTIFIERS  {printf("Token: %s\n", yytext); return TYPE_IDENTIFIERS;}

. ; /* Do nothing */

 /*
  * Keywords are case-insensitive except for the values true and false,
  * which must begin with a lower-case letter.
  */


 /*
  *  String constants (C syntax)
  *  Escape sequence \c is accepted for all characters c. Except for 
  *  \n \t \b \f, the result is c.
  *
  */


%%
int main()
{
  yylex();

  return 0;
}

int yywrap() {
    return 1;
}

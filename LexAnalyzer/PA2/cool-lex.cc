#line 2 "cool-lex.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <errno.h>

/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#ifndef _WIN32
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif


/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define FLEX_DEBUG
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;

#define FLEX_DEBUG
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 58
#define YY_END_OF_BUFFER 59
static yyconst short int yy_accept[357] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       59,   57,    9,   10,   32,   52,   53,   45,   42,   44,
       49,   43,   29,   51,   50,   47,   46,   48,   54,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   55,   56,    3,    6,    4,    5,    4,   33,
       34,   33,   33,   37,   38,   37,    9,    2,    8,    1,
       29,   41,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   14,   14,   13,   15,   31,   13,   15,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   26,

       26,   31,   31,   31,   31,   31,   31,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   14,   30,   14,
       13,   15,   30,   13,   15,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   26,   26,   30,   30,   30,   30,
       30,   30,   30,    7,   35,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   18,   18,   31,   31,   25,   25,
       27,   27,   31,   31,   31,   31,   31,   31,   31,   31,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   18,

       18,   30,   30,   25,   25,   27,   27,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   23,   23,   31,   31,
       31,   12,   12,   24,   24,   31,   31,   15,   15,   31,
       31,   31,   31,   19,   19,   31,   31,   31,   31,   20,
       20,   21,   21,   31,   31,   23,   23,   30,   30,   12,
       12,   24,   24,   30,   30,   30,   15,   15,   30,   30,
       30,   30,   19,   19,   30,   30,   30,   30,   20,   20,
       21,   21,   28,   30,   30,   31,   31,   11,   11,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   22,   22,   30,   30,   11,   11,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   22,   22,   31,   31,
       31,   31,   31,   17,   17,   31,   31,   30,   30,   30,
       30,   17,   17,   30,   30,   31,   31,   31,   31,   30,
       30,   30,   30,   16,   16,   16,   16,   31,   31,   30,
       30,   31,   31,   30,   30,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    1,    5,
        6,    7,    8,    1,    9,   10,   11,   12,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   16,
       17,   18,    1,   19,   20,   21,   22,   23,   24,   25,
       21,   26,   27,   21,   21,   28,   21,   29,   30,   31,
       21,   32,   33,   34,   21,   35,   36,   21,   21,   21,
        1,   37,    1,    1,   38,    1,   39,   40,   41,   42,

       43,   44,   40,   45,   46,   40,   40,   47,   40,   48,
       49,   50,   40,   51,   52,   53,   54,   55,   56,   40,
       40,   40,   57,    1,   58,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[59] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[361] =
    {   0,
        0,    0,  780,  779,   56,   57,   58,   62,   64,   66,
      781,  784,  777,  784,  784,  771,  784,  769,  784,  765,
      784,  784,   59,  784,  784,  758,  784,  784,  784,   88,
       55,  746,   45,   47,  120,   55,  122,   52,   54,   60,
       61,  161,  128,  190,  120,  195,  127,  195,   63,  120,
      195,  132,  784,  784,  784,  784,  784,  784,  759,  784,
      784,  784,  752,  784,  784,  784,  761,  784,  784,  784,
       68,  784,    0,    0,  127,  141,  189,  206,  616,  196,
      210,  198,  212,  208,  209,  208,  229,  143,  230,  232,
      225,  228,  233,  230,  235,  230,  234,  233,  237,  242,

      243,  249,  255,  264,  269,  267,  268,    0,    0,  263,
      277,  266,  280,  268,  282,  270,  285,  281,  292,  283,
      282,  284,  282,  296,  305,  291,  299,  304,  301,  306,
      302,  306,  305,  309,  314,  315,  317,  318,  325,  332,
      216,  330,  333,  784,  784,  341,  345,  337,  338,  235,
      348,  349,  352,  355,  351,  353,  356,  357,  359,  356,
      362,  358,  364,  365,  370,  375,  376,  377,  380,  381,
      382,  383,  390,  391,  390,  391,  391,  392,  395,  396,
      401,  408,  400,  403,  417,  421,  424,  425,  421,  422,
      209,  425,  428,  430,  427,  433,  429,  429,  431,  434,

      435,  439,  440,  445,  450,  454,  455,  460,  461,  459,
      460,  462,  463,  193,  466,  467,  474,  475,  466,  467,
      197,  477,  484,  485,  488,  485,  489,  495,  496,  497,
      498,  502,  505,  502,  504,  509,  510,  505,  507,  507,
      508,  512,  513,  526,  531,  537,  538,  528,  529,  539,
      540,  543,  544,  120,  538,  539,  545,  546,  548,  549,
      553,  560,  557,  560,  569,  573,  568,  569,  569,  570,
      568,  571,   38,  582,  584,  589,  590,  589,  591,  126,
      586,  587,  589,  590,  599,  604,  612,  613,  607,  608,
      609,  610,  617,  618,  610,  611,  629,  631,  630,  631,

      632,  633,  631,  632,  642,  646,  651,  652,  646,  647,
      648,  651,  656,  659,  116,  103,  650,  651,  661,  662,
        0,  657,  664,  672,  675,  677,  679,  683,  684,  679,
      680,  688,  689,  693,  694,  690,  692,  693,  694,  695,
      696,  703,  704,  713,  714,  716,  722,  721,  722,  723,
      724,  728,  731,  732,  735,  784,  124,   89,   88,   75
    } ;

static yyconst short int yy_def[361] =
    {   0,
      356,    1,  357,  357,  358,  358,  359,  359,  360,  360,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,  356,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,

       30,   30,   30,   30,   30,   30,   30,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,  356,  356,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,

       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   42,   42,   42,   42,

       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   42,   42,   42,
       42,   42,   42,   42,   42,   30,   30,   30,   30,   42,
       42,   42,   42,   30,   30,   42,   42,   30,   30,   42,
       42,   30,   30,   42,   42,    0,  356,  356,  356,  356
    } ;

static yyconst short int yy_nxt[843] =
    {   0,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   23,   24,   25,   26,   27,   28,   29,   30,
       30,   31,   32,   33,   34,   30,   35,   36,   37,   38,
       39,   30,   30,   40,   30,   41,   12,   12,   42,   42,
       43,   42,   44,   45,   42,   46,   47,   48,   49,   50,
       42,   42,   51,   42,   42,   52,   53,   54,   58,   58,
       61,   62,   59,   59,   61,   62,   65,   66,   65,   66,
       71,   71,   80,   84,   75,   64,  100,   81,   92,   71,
       71,  315,   76,  102,   93,  104,  106,  135,   60,   57,
      316,   82,   85,   77,   63,  101,   83,   94,   63,   73,

       73,   78,  103,   95,  105,  107,  136,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   55,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   86,   96,  118,  110,   87,  137,
      127,   97,   88,  141,  119,  111,  128,  142,  119,  146,
      148,  321,  273,   89,   98,  120,  112,   90,  138,  129,
       99,   91,  108,  108,  113,  130,  143,  163,  147,  149,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  164,  108,  109,

      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  114,  131,  121,
      139,  146,  115,  122,  132,  148,  280,  123,  151,  153,
      151,  153,  155,  155,  157,  273,  116,  133,  124,  140,
      147,  117,  125,  134,  149,  141,  126,  152,  154,  152,
      154,  156,  156,  158,  159,  160,  157,  159,  160,  163,
      254,  165,  167,  165,  167,  169,  221,  171,  169,  214,
      171,  173,  173,  161,  162,  158,  161,  162,  175,  164,
      166,  168,  166,  168,  175,  170,  172,  177,  170,  172,
      174,  174,  177,  179,  179,  181,  183,  176,  181,  183,

      185,  187,  185,  176,  187,  189,  178,  189,  192,  194,
      195,  178,  180,  180,  182,  184,  198,  182,  184,  186,
      188,  186,  192,  188,  190,  198,  190,  193,  196,  197,
      194,  195,  200,  202,  200,  202,  199,  204,  191,  206,
      204,  193,  206,  208,  208,  199,  210,  210,  212,  196,
      197,  201,  203,  201,  203,  212,  215,  205,  207,  215,
      205,  207,  209,  209,  217,  211,  211,  213,  217,  219,
      219,  222,  222,  224,  213,  216,  224,   84,  216,   84,
       86,   86,  226,  218,  228,  226,  228,  218,  220,  220,
      223,  223,  225,  230,  230,  225,   85,  232,   85,   89,

       89,  227,  232,  229,  227,  229,  234,  234,  236,  236,
      238,  238,  231,  231,  100,  100,  233,  240,  240,  242,
      242,  233,  244,  244,  246,  235,  235,  237,  237,  239,
      239,  246,  248,  101,  101,  248,  241,  241,  243,  243,
      250,  245,  245,  247,  250,  252,  252,  118,  118,  121,
      247,  249,  121,  255,  249,  257,  255,  257,  259,  251,
      259,  261,  261,  251,  253,  253,  120,  120,  124,  263,
      263,  124,  256,  265,  258,  256,  258,  260,  265,  260,
      262,  262,  267,  267,  135,  135,  269,  269,  264,  264,
      271,  271,  266,  274,  274,  276,  276,  266,  278,  278,

      281,  268,  268,  136,  136,  270,  270,  281,  283,  272,
      272,  283,  275,  275,  277,  277,  285,  279,  279,  282,
      285,  160,  160,  287,  287,   92,  282,  284,   92,  289,
      284,  289,   96,   96,   97,  286,   97,  291,  291,  286,
      162,  162,  288,  288,   94,  293,  293,   94,  290,  295,
      290,   98,   98,   99,  295,   99,  292,  292,  297,  297,
      299,  299,  301,  301,  294,  294,  303,  303,  296,  305,
      305,  195,  195,  296,  307,  307,  127,  298,  298,  300,
      300,  302,  302,  127,  309,  304,  304,  309,  306,  306,
      197,  197,  131,  308,  308,  129,  131,  132,  132,  311,

      311,  313,  129,  310,  313,  317,  310,  317,   75,   75,
      319,  133,  319,   80,   80,  133,  134,  134,  312,  312,
      314,   81,   81,  314,  318,  322,  318,   77,   77,  320,
      322,  320,   82,   82,  324,  324,   93,   93,  102,  102,
       83,   83,  104,  104,  323,  326,  326,  150,  110,  323,
      110,  328,  328,  325,  325,   95,   95,  103,  103,  114,
      114,  105,  105,  115,  115,  327,  327,  112,  330,  112,
      329,  329,  330,  332,  332,  128,  128,  137,  116,  116,
      137,  139,  117,  117,  139,  334,  334,  331,   76,   76,
      336,  331,  333,  333,  130,  130,  138,  336,  338,  138,

      140,  338,  106,  140,  106,  335,  335,   78,   78,  337,
      111,  111,  340,  340,  342,  342,  337,  339,  142,  142,
      339,  107,  344,  107,  344,   88,   88,  346,  346,  113,
      113,  341,  341,  343,  343,  123,  123,  143,  143,  348,
      348,  345,  350,  345,   91,   91,  347,  347,  350,  352,
      352,  354,  354,  159,  126,  126,  159,  194,  349,  349,
      194,  351,   67,  145,  144,   79,   72,  351,  353,  353,
      355,  355,  161,   70,   69,  161,  196,   68,   67,  196,
      356,   56,   56,   11,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,

      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356
    } ;

static yyconst short int yy_chk[843] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,    6,
        7,    7,    5,    6,    8,    8,    9,    9,   10,   10,
       23,   23,   33,   34,   31,  360,   38,   33,   36,   71,
       71,  273,   31,   39,   36,   40,   41,   49,  359,  358,
      273,   33,   34,   31,    7,   38,   33,   36,    8,   30,

       30,   31,   39,   36,   40,   41,   49,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,  357,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   35,   37,   45,   43,   35,   50,
       47,   37,   35,  316,  315,   43,   47,   52,   45,   75,
       76,  280,  254,   35,   37,   45,   43,   35,   50,   47,
       37,   35,   42,   42,   43,   47,   52,   88,   75,   76,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   88,   42,   42,

       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   44,   48,   46,
       51,   77,   44,   46,   48,   78,  221,   46,   80,   81,
       82,   83,   84,   85,   86,  214,   44,   48,   46,   51,
       77,   44,   46,   48,   78,   51,   46,   80,   81,   82,
       83,   84,   85,   86,   87,   87,   89,   90,   90,   91,
      191,   92,   93,   94,   95,   96,  150,   97,   98,  141,
       99,  100,  101,   87,   87,   89,   90,   90,  102,   91,
       92,   93,   94,   95,  103,   96,   97,  104,   98,   99,
      100,  101,  105,  106,  107,  110,  111,  102,  112,  113,

      114,  115,  116,  103,  117,  118,  104,  120,  121,  122,
      122,  105,  106,  107,  110,  111,  123,  112,  113,  114,
      115,  116,  124,  117,  118,  126,  120,  121,  122,  122,
      125,  125,  127,  128,  129,  130,  123,  131,  119,  132,
      133,  124,  134,  135,  136,  126,  137,  138,  139,  125,
      125,  127,  128,  129,  130,  140,  142,  131,  132,  143,
      133,  134,  135,  136,  146,  137,  138,  139,  147,  148,
      149,  151,  152,  153,  140,  142,  154,  155,  143,  156,
      157,  158,  159,  146,  160,  161,  162,  147,  148,  149,
      151,  152,  153,  163,  164,  154,  155,  165,  156,  157,

      158,  159,  166,  160,  161,  162,  167,  168,  169,  170,
      171,  172,  163,  164,  173,  174,  165,  175,  176,  177,
      178,  166,  179,  180,  181,  167,  168,  169,  170,  171,
      172,  182,  183,  173,  174,  184,  175,  176,  177,  178,
      185,  179,  180,  181,  186,  187,  188,  189,  190,  192,
      182,  183,  193,  194,  184,  195,  196,  197,  198,  185,
      199,  200,  201,  186,  187,  188,  189,  190,  192,  202,
      203,  193,  194,  204,  195,  196,  197,  198,  205,  199,
      200,  201,  206,  207,  208,  209,  210,  211,  202,  203,
      212,  213,  204,  215,  216,  217,  218,  205,  219,  220,

      222,  206,  207,  208,  209,  210,  211,  223,  224,  212,
      213,  225,  215,  216,  217,  218,  226,  219,  220,  222,
      227,  228,  229,  230,  231,  232,  223,  224,  233,  234,
      225,  235,  236,  237,  238,  226,  239,  240,  241,  227,
      228,  229,  230,  231,  232,  242,  243,  233,  234,  244,
      235,  236,  237,  238,  245,  239,  240,  241,  246,  247,
      248,  249,  250,  251,  242,  243,  252,  253,  244,  255,
      256,  257,  258,  245,  259,  260,  261,  246,  247,  248,
      249,  250,  251,  262,  263,  252,  253,  264,  255,  256,
      257,  258,  265,  259,  260,  261,  266,  267,  268,  269,

      270,  271,  262,  263,  272,  274,  264,  275,  276,  277,
      278,  265,  279,  281,  282,  266,  267,  268,  269,  270,
      271,  283,  284,  272,  274,  285,  275,  276,  277,  278,
      286,  279,  281,  282,  287,  288,  289,  290,  291,  292,
      283,  284,  293,  294,  285,  295,  296,   79,  297,  286,
      298,  299,  300,  287,  288,  289,  290,  291,  292,  301,
      302,  293,  294,  303,  304,  295,  296,  297,  305,  298,
      299,  300,  306,  307,  308,  309,  310,  311,  301,  302,
      312,  313,  303,  304,  314,  317,  318,  305,  319,  320,
      322,  306,  307,  308,  309,  310,  311,  323,  324,  312,

      313,  325,  326,  314,  327,  317,  318,  319,  320,  322,
      328,  329,  330,  331,  332,  333,  323,  324,  334,  335,
      325,  326,  336,  327,  337,  338,  339,  340,  341,  328,
      329,  330,  331,  332,  333,  342,  343,  334,  335,  344,
      345,  336,  346,  337,  338,  339,  340,  341,  347,  348,
      349,  350,  351,  352,  342,  343,  353,  354,  344,  345,
      355,  346,   67,   63,   59,   32,   26,  347,  348,  349,
      350,  351,  352,   20,   18,  353,  354,   16,   13,  355,
       11,    4,    3,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,

      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static yyconst short int yy_rule_linenum[58] =
    {   0,
       79,   84,   89,   90,   95,  100,  101,  106,  115,  120,
      126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
      136,  137,  138,  139,  140,  141,  142,  143,  150,  151,
      152,  160,  161,  188,  200,  222,  232,  234,  236,  245,
      246,  248,  249,  250,  251,  252,  253,  254,  255,  256,
      257,  258,  259,  260,  261,  262,  264
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "cool.flex"
#define INITIAL 0
#line 2 "cool.flex"
#include <cool-parse.h>
#include <stringtab.h>
#include <utilities.h>
#include <string.h>
#include <stdio.h>

/* The compiler assumes these identifiers. */
#define yylval cool_yylval
#define yylex  cool_yylex

/* Max size of string constants */
#define MAX_STR_CONST 1025
#define YY_NO_UNPUT   /* keep g++ happy */

extern FILE *fin; /* we read from this file */

/* define YY_INPUT so we read from the FILE fin:
 * This change makes it possible to use this scanner in
 * the Cool compiler.
 */
#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
    if ( (result = fread( (char*)buf, sizeof(char), max_size, fin)) < 0) \
        YY_FATAL_ERROR( "read() in flex scanner failed");

char string_buf[MAX_STR_CONST]; /* to assemble string constants */
char *string_buf_ptr;

extern int curr_lineno;
extern int verbose_flag;

extern YYSTYPE cool_yylval;

/*
 *  Add Your own definitions here
*/
int buffer_index = 0;
/*
 * Define names for regular expressions here.
 */
#define COMMENTS_DASH 1

#define COMMENTS_PAREN 2

#define STRING 3
 
#define STRING_ERROR 4

#line 736 "cool-lex.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 75 "cool.flex"

 /*
  * Begin comments
  */
#line 903 "cool-lex.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 357 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 784 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */

		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 58 )
				fprintf( stderr, "--accepting rule at line %d (\"%s\")\n",
				         yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 58 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 59 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 79 "cool.flex"
{BEGIN(COMMENTS_DASH);}
	YY_BREAK
/*
  * Begin comments
  */
case 2:
YY_RULE_SETUP
#line 84 "cool.flex"
{BEGIN(COMMENTS_PAREN);}
	YY_BREAK
/*
  * Do nothing. Ignore all input characters
  */
case 3:
YY_RULE_SETUP
#line 89 "cool.flex"
{}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 90 "cool.flex"
{}
	YY_BREAK
/*
  * Count lines in comments
  */
case 5:
YY_RULE_SETUP
#line 95 "cool.flex"
{curr_lineno++;}
	YY_BREAK
/*
  * Return to initial state 
  */
case 6:
YY_RULE_SETUP
#line 100 "cool.flex"
{BEGIN(INITIAL);}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 101 "cool.flex"
{BEGIN(INITIAL);}
	YY_BREAK
/*
  * Error handling for comments
  */
case 8:
YY_RULE_SETUP
#line 106 "cool.flex"
{
    cool_yylval.error_msg = strdup("Unmatched *)");
    return ERROR;
}
	YY_BREAK
case YY_STATE_EOF(COMMENTS_PAREN):
#line 110 "cool.flex"
{
    BEGIN(INITIAL);
    cool_yylval.error_msg = strdup("EOF in comment");
    return ERROR;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 115 "cool.flex"
;/* Do nothing for white spaces */
	YY_BREAK
/*
  * Count lines
  */
case 10:
YY_RULE_SETUP
#line 120 "cool.flex"
{curr_lineno++;}
	YY_BREAK
/*
  * Keywords are case-insensitive except for the values true and false,
  * which must begin with a lower-case letter.
  */
case 11:
YY_RULE_SETUP
#line 126 "cool.flex"
{ return CLASS; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 127 "cool.flex"
{ return ELSE; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 128 "cool.flex"
{ return IF; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 129 "cool.flex"
{ return FI; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 130 "cool.flex"
{ return IN; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 131 "cool.flex"
{ return INHERITS; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 132 "cool.flex"
{ return ISVOID; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 133 "cool.flex"
{ return LET; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 134 "cool.flex"
{ return LOOP; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 135 "cool.flex"
{ return POOL; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 136 "cool.flex"
{ return THEN; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 137 "cool.flex"
{ return WHILE; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 138 "cool.flex"
{ return CASE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 139 "cool.flex"
{ return ESAC; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 140 "cool.flex"
{ return NEW; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 141 "cool.flex"
{ return OF; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 142 "cool.flex"
{ return NOT; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 143 "cool.flex"
{ return BOOL_CONST; }
	YY_BREAK
/*
  * iNTEGERS, Identifiers, and Special Notation
  * 
  */
case 29:
YY_RULE_SETUP
#line 150 "cool.flex"
{ cool_yylval.symbol = inttable.add_string(yytext); return INT_CONST; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 151 "cool.flex"
{ cool_yylval.symbol = inttable.add_string(yytext); return OBJECTID; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 152 "cool.flex"
{ cool_yylval.symbol = inttable.add_string(yytext); return TYPEID; }
	YY_BREAK
/*
  *  String constants (C syntax)
  *  Escape sequence \c is accepted for all characters c. Except for 
  *  \n \t \b \f, the result is c.
  *
  */
case 32:
YY_RULE_SETUP
#line 160 "cool.flex"
{ BEGIN(STRING); buffer_index = 0;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 161 "cool.flex"
{
  if(buffer_index + yyleng >= MAX_STR_CONST)
    {
      BEGIN(STRING_ERROR);
      cool_yylval.error_msg = strdup("String constant too long");
      return ERROR;
    }
    else
    {
      for (int i = 0; i < yyleng; i++)
      {
        if (buffer_index + yyleng < MAX_STR_CONST)
        {
          strncpy(string_buf + buffer_index, yytext, yyleng);
          buffer_index += yyleng;
        }
        else
        {
          BEGIN(STRING_ERROR);
          cool_yylval.error_msg = strdup("String constant too long");
          return ERROR;          
        }
      }

    }
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 188 "cool.flex"
{
  curr_lineno++;
  if (buffer_index >= MAX_STR_CONST)
  {
      BEGIN(STRING_ERROR);
      cool_yylval.error_msg = strdup("String constant too long");
      return ERROR;
  }
  string_buf[buffer_index] = '\n';
  buffer_index++;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 200 "cool.flex"
{
  if (buffer_index >= MAX_STR_CONST)
  {
      BEGIN(STRING_ERROR);
      cool_yylval.error_msg = strdup("String constant too long");
      return ERROR;
  }
  
  BEGIN(STRING_ERROR);
  cool_yylval.error_msg = strdup("String contains null character");
  string_buf[buffer_index] = '0';
  buffer_index++;

  return ERROR;
}
	YY_BREAK
case YY_STATE_EOF(STRING):
#line 216 "cool.flex"
{
    BEGIN(STRING_ERROR);
    cool_yylval.error_msg = strdup("EOF in string constant");
    return ERROR;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 222 "cool.flex"
{
  curr_lineno++;
  if (string_buf[buffer_index-1] != '\\')
  {
    cool_yylval.error_msg = strdup("Unterminated string constant");
    BEGIN(INITIAL);
    return ERROR;   
  }
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 232 "cool.flex"
; /* Do nothing while \n is not found */
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 234 "cool.flex"
{BEGIN(INITIAL);}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 236 "cool.flex"
{
  BEGIN(INITIAL);
  cool_yylval.symbol = inttable.add_string(string_buf);
  return STR_CONST;
}
	YY_BREAK
/*
  *  The multiple-character operators.
  */
case 40:
YY_RULE_SETUP
#line 245 "cool.flex"
{  return DARROW; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 246 "cool.flex"
{  return ASSIGN;  }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 248 "cool.flex"
{ return '+'; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 249 "cool.flex"
{ return '/'; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 250 "cool.flex"
{ return '-'; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 251 "cool.flex"
{ return '*'; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 252 "cool.flex"
{ return '='; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 253 "cool.flex"
{ return '<'; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 254 "cool.flex"
{ return '>'; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 255 "cool.flex"
{ return '.'; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 256 "cool.flex"
{ return ';'; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 257 "cool.flex"
{ return ':'; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 258 "cool.flex"
{ return '('; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 259 "cool.flex"
{ return ')'; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 260 "cool.flex"
{ return '@'; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 261 "cool.flex"
{ return '{'; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 262 "cool.flex"
{ return '}'; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 264 "cool.flex"
; /* Do nothing */
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 266 "cool.flex"
ECHO;
	YY_BREAK
#line 1406 "cool-lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENTS_DASH):
case YY_STATE_EOF(STRING_ERROR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 357 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 357 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 356);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef _WIN32
#include <unistd.h>
#else
#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 266 "cool.flex"
